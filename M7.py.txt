import numpy as np

# Define the Perceptron class
class Perceptron:
    def __init__(self, input_size, lr=1, epochs=10):
        self.W = np.zeros(input_size+1)
        self.epochs = epochs
        self.lr = lr
        
    # Define the activation function
    def activation_fn(self, x):
        return 1 if x >= 0 else 0
    
    # Define the predict function
    def predict(self, x):
        x = np.insert(x, 0, 1)
        z = self.W.T.dot(x)
        a = self.activation_fn(z)
        return a
    
    # Define the fit function to train the model
    def fit(self, X, d):
        for _ in range(self.epochs):
            for i in range(d.shape[0]):
                x = X[i]
                y = self.predict(x)
                e = d[i] - y
                self.W = self.W + self.lr * e * np.insert(x, 0, 1)
                
# Define the input and output data
X = np.array([[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]])
d = np.array([0,0,0,0,0,0,0,1])

# Create an instance of the Perceptron class
perceptron = Perceptron(input_size=3)

# Train the model
perceptron.fit(X, d)

# Test the model
test_data = np.array([[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]])
for i in range(test_data.shape[0]):
    x = test_data[i]
    print(x, ":", perceptron.predict(x))